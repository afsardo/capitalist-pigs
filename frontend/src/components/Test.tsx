import React, { useEffect, useState } from "react";
import { Wallet } from "fuels";

// Import the contract factory from the folder generated by the fuelchain
// command
import { ContractAbi__factory } from "../contracts";
import Button from "./Button";

// The private key of the `owner` in chainConfig.json.
// This enables us to have an account with an initial balance.
const WALLET_SECRET =
  "0xa449b1ffee0e2205fa924c6740cc48b3b473aa28587df6dab12abc245d1f5298";

// The ID of the contract deployed to our local node.
// The contract ID is displayed when the `forc deploy` command is run.
// E.g. Contract id: 0xa326e3472fd4abc417ba43e369f59ea44f8325d42ba6cf71ec4b58123fd8668a
// const CONTRACT_ID = "0xa326e3472fd4abc417ba43e369f59ea44f8325d42ba6cf71ec4b58123fd8668a"
const CONTRACT_ID =
  "0xef7f6c1b91ce74a775f3d863b825d91bea5cf849a158e01f708f90178e8c6225";

// Create a "Wallet" using the private key above.
const wallet = new Wallet(WALLET_SECRET);

// Connect a "Contract" instance using the ID of the deployed contract and the
// wallet above.
const contract = ContractAbi__factory.connect(CONTRACT_ID, wallet);

function Test() {
  const [counter, setCounter] = useState(0);
  const [totalSupply, setTotalSupply] = useState(0);

  useEffect(() => {
    async function main() {
      // Executes the `counter()` function to query the current contract state.
      // the `.get()` method is read-only. Therefore, doesn't spend coins.
      const { value } = await contract.functions.counter().get();
      console.log("counter contract", value);
      setCounter(Number(value));

      const { value: totalSupplyValue } = await contract.functions
        .total_supply()
        .get();
      console.log("totalSupplyValue", totalSupplyValue);
      setTotalSupply(Number(totalSupplyValue));
    }
    main();
  }, []);

  async function increment() {
    // Creates a transactions to call the `increment()` function, passing in
    // the amount we want to increment. Because we're creating a TX that updates
    // the contract state, this requires the wallet to have enough coins to
    // cover the costs and to sign the transaction.
    const { value } = await contract.functions.increment(1).call();
    setCounter(Number(value));
  }

  async function init() {
    // Creates a transactions to call the `increment()` function, passing in
    // the amount we want to increment. Because we're creating a TX that updates
    // the contract state, this requires the wallet to have enough coins to
    // cover the costs and to sign the transaction.
    const { value } = await contract.functions
      .constructor(
        true,
        { Address: { value: WALLET_SECRET } },
        // TODO: ADD CONTRACTS TO CONSTANT FILE / ENV VARS
        { Address: { value: WALLET_SECRET } },
        100,
        1967084109,
        50,
        3600
      )
      .call();
    console.log(value);
  }

  async function mint() {
    // Creates a transactions to call the `increment()` function, passing in
    // the amount we want to increment. Because we're creating a TX that updates
    // the contract state, this requires the wallet to have enough coins to
    // cover the costs and to sign the transaction.
    const { value } = await contract.functions
      .mint(1, { Address: { value: WALLET_SECRET } })
      .call();
    console.log(value);
  }

  return (
    <div className="App">
      <header className="App-header pt-12">
        <p className="text-white">Counter: {counter}</p>
        <p className="text-white">Total supply: {totalSupply}</p>
        <div className="flex flex-col gap-4">
          <Button onClick={increment}>Increment</Button>
          <Button onClick={init}>Initialize Pig Contract</Button>
          <Button onClick={mint}>Mint</Button>
        </div>
      </header>
    </div>
  );
}

export default Test;
